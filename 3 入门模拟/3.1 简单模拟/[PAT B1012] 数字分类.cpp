/*
给定一系列正整数，请按要求对数字进行分类，并输出以下 5 个数字：

A1​  = 能被 5 整除的数字中所有偶数的和；
A2​  = 将被 5 除后余 1 的数字按给出顺序进行交错求和，即计算 n1​ −n2 +n3​ −n​4​ ⋯；
A​3​  = 被 5 除后余 2 的数字的个数；
A​4​  = 被 5 除后余 3 的数字的平均数，精确到小数点后 1 位；
A​5​  = 被 5 除后余 4 的数字中最大数字。
输入格式：
每个输入包含 1 个测试用例。每个测试用例先给出一个不超过 1000 的正整数 N，随后给出 N 个不超过 1000 的待分类的正整数。数字间以空格分隔。

输出格式：
对给定的 N 个正整数，按题目要求计算 A​1 ~A5
​​  并在一行中顺序输出。数字间以空格分隔，但行末不得有多余空格。

若其中某一类数字不存在，则在相应位置输出 N。

输入样例 1：
13 1 2 3 4 5 6 7 8 9 10 20 16 18
输出样例 1：
30 11 2 9.7 9
输入样例 2：
8 1 2 4 5 6 7 9 16
输出样例 2：
N 11 2 N 9

*/
#include <iostream>
#include <cmath>
using namespace std;

int a;
int A[6];
bool is[6];

int main(){

    int n;
    cin >> n;
    int f = 1;
    double sum = 0;
    for(int i = 1; i <= n; i++){
        cin >> a;
        if(a % 5 == 0 && a % 2 == 0) {
            is[1] = true;
            A[1] += a;
        }
        if(a % 5 == 1){
            is[2] = true;
            A[2] += a*f;
            f = - f;
        }
        if(a % 5 == 2) {
            is[3] = true;
            A[3] ++;
        }
        if(a % 5 == 3){
            is[4] = true;
            A[4] ++;
            sum += a;
        }
        if(a % 5 == 4){
            is[5] = true;
            A[5] = max(A[5], a);
        }
    }
    for(int i = 1; i < 5; i++){
        if(is[i]){
            if(i == 4){
                printf("%.1lf ", sum / A[4]);
            }else{
                cout << A[i] << ' ';
            }
        }else{
            cout << "N ";
        }
    }
    if(is[5]){
        cout << A[5] << endl;
    }else{
        cout << "N" << endl;
    }

    return 0;
}